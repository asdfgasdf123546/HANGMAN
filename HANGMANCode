#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <algorithm>
using namespace std;

// global constansts and variables
const int MAX_INCORRECT = 6; // maximum wrong guesses allowed
char incorrect[MAX_INCORRECT]; // Array to hold incorrect guesses
int numIncorrect = 0; // Counter for the number of incrrect guesses made
int misses = 0; // counter for the number of misses

// Function display to hangman drawing based on how many times the player has guesses wrong
void displayHangman() {
	cout << "\n"; // print a newline for spacing
	switch (misses) { // check the number of misses and show the appropiate hangman stage
	case 0:
		cout << "  +---+\n";
		cout << "  |   |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "=========\n";
		break;
	case 1:
		cout << "  +---+\n";
		cout << "  |   |\n";
		cout << "  O   |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "=========\n";
		break;
	case 2:
		cout << "  +---+\n";
		cout << "  |   |\n";
		cout << "  O   |\n";
		cout << "  |   |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "=========\n";
		break;
	case 3:
		cout << "  +---+\n";
		cout << "  |   |\n";
		cout << "  O   |\n";
		cout << "  |/  |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "=========\n";
		break;
	case 4:
		cout << "  +---+\n";
		cout << "  |   |\n";
		cout << "  O   |\n";
		cout << " /|\\  |\n";
		cout << "      |\n";
		cout << "      |\n";
		cout << "=========\n";
		break;
	case 5:
		cout << "  +---+\n";
		cout << "  |   |\n";
		cout << "  O   |\n";
		cout << " /|\\  |\n";
		cout << "   \\  |\n";
		cout << "      |\n";
		cout << "=========\n";
		break;
	case 6:
		cout << "  +---+\n";
		cout << "  |   |\n";
		cout << "  O   |\n";
		cout << " /|\\  |\n";
		cout << " / \\  |\n";
		cout << "      |\n";
		cout << "=========\n";
		break;

	}
}
// function to display the current state of the game
void display(string guessedWord) {
	cout << "\n Word: ";
	for (int i = 0; i < guessedWord.length(); i++) {
		cout << guessedWord[i] << ' '; // show each character in the guessed word followed by a space
	}
	cout << "\n Incorrect guesses: ";
	for (int i = 0; i < numIncorrect; i++) {
		cout << incorrect << ' ';
	}
	cout << "\n Misses left:" << MAX_INCORRECT - misses << "\n";
	displayHangman();
}
// Function to check the player's guess againts
string processGuess(char guess, string word, string guessedWord) {
	bool isCorrect = false;
	for (int i = 0; i < word.length(); i++) {
		if (word[i] == guess && guessedWord[i] == '_') {
			guessedWord[i] = guess;
			isCorrect = true;
		}
	}
	//check if the guess was incorrect
	if (!isCorrect) {
		// initialized a variables to indicate if the guess is found in the incorrect guesses
		bool alreadyGuessed = false;

		// iterate through the incorrect guesses to see if the guess was already made
		for (int i = 0; i < numIncorrect; i++) {
			if (incorrect[i] == guess) {
				alreadyGuessed = true;
				break; // Break the Loop if the guess is found
			}
		}

		//   if the guess was not found in the incorrect guesses
		if (!alreadyGuessed) {
			incorrect[numIncorrect++] = guess; // Add the new incorrect guess
			misses++; // Increment the misses counter
		}
	}
	return guessedWord; // Return the updated guessed word
}
// mai function where the game runs
int main() {
	string wordList[] = { "computer", "science", "programming", "hangman", "game" };
	srand(time(0)); // seed the random number generator
	string word = wordList[rand() % 5]; // randomly pick a word from the list
	string guessedWord(word.length(), '_'); // create the guessed word filled with underscores

	cout << "Welcome to Hangman\n"; // welcome message
	while (misses < MAX_INCORRECT && guessedWord != word) {
		display(guessedWord);
		cout << "Enter your guess: ";
		char guess;
		cin >> guess; // get the player's guess

		string oldGuessedWord = guessedWord; // keep the track of the word before the guess
		guessedWord = processGuess(guess, word, guessedWord); // Process the guess

		if (guessedWord == oldGuessedWord) {
			cout << "WRONG!\n"; // inform the player the guess was wrong
		}
		else {
			cout << "Nice!\n"; //Congratulate the player on a correct guess
		}
	} //end of game loop

	// Check if the game ended with a win or loss
	if (guessedWord == word) {
		cout << "Nice you got the word: " << word << "\n"; // Win Message
	}
	else {
		cout << "Game Over! The word was: " << word << "\n"; //lose message
		displayHangman();
	}

	return 0; // End of the Program
}//end of main
